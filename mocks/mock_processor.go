// Code generated by MockGen. DO NOT EDIT.
// Source: processor.go

// Package mock_types is a generated GoMock package.
package mock_types

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/yjimk/smallbatch/types"
)

// MockBatchProcessor is a mock of BatchProcessor interface.
type MockBatchProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockBatchProcessorMockRecorder
}

// MockBatchProcessorMockRecorder is the mock recorder for MockBatchProcessor.
type MockBatchProcessorMockRecorder struct {
	mock *MockBatchProcessor
}

// NewMockBatchProcessor creates a new mock instance.
func NewMockBatchProcessor(ctrl *gomock.Controller) *MockBatchProcessor {
	mock := &MockBatchProcessor{ctrl: ctrl}
	mock.recorder = &MockBatchProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchProcessor) EXPECT() *MockBatchProcessorMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockBatchProcessor) Process(arg0 types.Job) types.JobResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", arg0)
	ret0, _ := ret[0].(types.JobResult)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockBatchProcessorMockRecorder) Process(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockBatchProcessor)(nil).Process), arg0)
}
